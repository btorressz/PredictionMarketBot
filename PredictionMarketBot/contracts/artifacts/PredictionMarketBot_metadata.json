{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_predictionMarketToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_priceFeed",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_bettingStrategy",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_riskManager",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_marketEventFetcher",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_governance",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "target",
						"type": "address"
					}
				],
				"name": "AddressEmptyCode",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "AddressInsufficientBalance",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "FailedInnerCall",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "SafeERC20FailedOperation",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "eventId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "outcome",
						"type": "bool"
					}
				],
				"name": "BetPlaced",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "betId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "profit",
						"type": "uint256"
					}
				],
				"name": "BetResult",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "eventId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "description",
						"type": "string"
					}
				],
				"name": "MarketEventFetched",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "eventId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newPosition",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "newOutcome",
						"type": "bool"
					}
				],
				"name": "PositionAdjusted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "TokensWithdrawn",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "activeBets",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "eventId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "outcome",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "active",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "eventId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "newPosition",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "newOutcome",
						"type": "bool"
					}
				],
				"name": "adjustPosition",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "eventId",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "condition",
						"type": "bool"
					}
				],
				"name": "automatedBet",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "bettingStrategy",
				"outputs": [
					{
						"internalType": "contract BettingStrategy",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "fetchMarketEvents",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getActiveBets",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "eventId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							},
							{
								"internalType": "bool",
								"name": "outcome",
								"type": "bool"
							},
							{
								"internalType": "bool",
								"name": "active",
								"type": "bool"
							}
						],
						"internalType": "struct PredictionMarketBot.Bet[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "betId",
						"type": "uint256"
					}
				],
				"name": "getBetResult",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getLatestPrice",
				"outputs": [
					{
						"internalType": "int256",
						"name": "",
						"type": "int256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "governance",
				"outputs": [
					{
						"internalType": "contract Governance",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "marketEventFetcher",
				"outputs": [
					{
						"internalType": "contract MarketEventFetcher",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "metrics",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "totalBets",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "successfulBets",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalProfit",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "eventId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "outcome",
						"type": "bool"
					}
				],
				"name": "placeBet",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "predictionMarketToken",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "priceFeed",
				"outputs": [
					{
						"internalType": "contract AggregatorV3Interface",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "riskManager",
				"outputs": [
					{
						"internalType": "contract RiskManager",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "withdrawTokens",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "A bot that participates in prediction markets based on predefined strategies and data inputs.",
			"errors": {
				"AddressEmptyCode(address)": [
					{
						"details": "There's no code at `target` (it is not a contract)."
					}
				],
				"AddressInsufficientBalance(address)": [
					{
						"details": "The ETH balance of the account is not enough to perform the operation."
					}
				],
				"FailedInnerCall()": [
					{
						"details": "A call to an address target failed. The target may have reverted."
					}
				],
				"SafeERC20FailedOperation(address)": [
					{
						"details": "An operation with an ERC20 token failed."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"adjustPosition(uint256,uint256,bool)": {
					"params": {
						"eventId": "The ID of the market event.",
						"newOutcome": "The new predicted outcome.",
						"newPosition": "The new amount to adjust the position to."
					}
				},
				"automatedBet(uint256,bool)": {
					"params": {
						"condition": "The condition to trigger the bet.",
						"eventId": "The ID of the market event."
					}
				},
				"constructor": {
					"details": "Initializes the contract with the given parameters.",
					"params": {
						"_bettingStrategy": "Address of the betting strategy contract.",
						"_governance": "Address of the governance contract.",
						"_marketEventFetcher": "Address of the market event fetcher contract.",
						"_predictionMarketToken": "Address of the token used in the prediction market.",
						"_priceFeed": "Address of the Chainlink price feed.",
						"_riskManager": "Address of the risk manager contract."
					}
				},
				"getActiveBets()": {
					"returns": {
						"_0": "An array of active bet details."
					}
				},
				"getBetResult(uint256)": {
					"params": {
						"betId": "The ID of the bet."
					},
					"returns": {
						"_0": "The result of the bet."
					}
				},
				"getLatestPrice()": {
					"returns": {
						"_0": "int256 The latest price."
					}
				},
				"placeBet(uint256,uint256,bool)": {
					"params": {
						"amount": "The amount of tokens to bet.",
						"eventId": "The ID of the market event.",
						"outcome": "The predicted outcome (true or false)."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new owner.",
					"params": {
						"newOwner": "The address of the new owner."
					}
				},
				"withdrawTokens(address,uint256)": {
					"params": {
						"amount": "The amount of tokens to withdraw.",
						"to": "The address to send the tokens to."
					}
				}
			},
			"title": "PredictionMarketBot",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"adjustPosition(uint256,uint256,bool)": {
					"notice": "Adjusts the position based on market sentiment."
				},
				"automatedBet(uint256,bool)": {
					"notice": "Places a bet automatically based on predefined conditions."
				},
				"fetchMarketEvents()": {
					"notice": "Fetches market events from the prediction market."
				},
				"getActiveBets()": {
					"notice": "Returns the details of active bets."
				},
				"getBetResult(uint256)": {
					"notice": "Returns the result of a specific bet."
				},
				"getLatestPrice()": {
					"notice": "Fetches the latest price from the Chainlink price feed."
				},
				"placeBet(uint256,uint256,bool)": {
					"notice": "Places a bet on a specific market event."
				},
				"withdrawTokens(address,uint256)": {
					"notice": "Withdraws tokens from the contract."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/PredictionMarketBot.sol": "PredictionMarketBot"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
			"keccak256": "0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd",
			"license": "MIT",
			"urls": [
				"bzz-raw://644cff84052e1e82b5bb502b2a46e8f142a62b0db4cd9b38200798ba8373c6f7",
				"dweb:/ipfs/QmTa99QHrJBn3SXDizquPBUiTxVCNKQrHgaWJhuds5Sce2"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
				"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
			"keccak256": "0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff",
			"license": "MIT",
			"urls": [
				"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d",
				"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi"
			]
		},
		"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
			"keccak256": "0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386",
			"license": "MIT",
			"urls": [
				"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0",
				"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721",
			"license": "MIT",
			"urls": [
				"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245",
				"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y"
			]
		},
		"contracts/BettingStrategy.sol": {
			"keccak256": "0xd44fe783e5666f5aa99bbf91f0148193499e2f1fcb8a0a5794045241fdb62702",
			"license": "MIT",
			"urls": [
				"bzz-raw://e6accab95aaa8b9cb93e5c6d6617204af7fff72e32ef87b67134625b1d6a131b",
				"dweb:/ipfs/QmNyZdcQkXt9LtWKfEstNkJ6k8KW4bA5MNyCFJ5N8pKAZF"
			]
		},
		"contracts/Governance.sol": {
			"keccak256": "0x717a20e689a9cf850a28fe0f2c2d171a6fea21ed9c6c70f785414553b1f5ff01",
			"license": "MIT",
			"urls": [
				"bzz-raw://aa57850eee0c136b52eb6b4df024d6786e99984fd027acc707b31cf7768cd740",
				"dweb:/ipfs/QmYoyzrXExeuJ6EwBUxQ3gBBKGr4V7s53LLb2H1UfWJi1A"
			]
		},
		"contracts/MarketEventFetcher.sol": {
			"keccak256": "0x4f644050089e3e2418827f9050098038c87b9e4d1408b2747109843055e32527",
			"license": "MIT",
			"urls": [
				"bzz-raw://0f11111c4d595f1602424a2d9df909f5ec3809bcfa5995b2e6f2e73acd046f16",
				"dweb:/ipfs/QmNiK5ewFy3QvyJ54cE1mTvuZxJWNQ3Gs4WTBd2ysgYMpz"
			]
		},
		"contracts/PredictionMarketBot.sol": {
			"keccak256": "0x5ab17d423ed8c903db78ae22ba0690e2291d0bccbd77ff337bac0408bec06607",
			"license": "MIT",
			"urls": [
				"bzz-raw://0d218276bd17be3e54255c1656f1052162425bd4f9d7f13f4d85db5c7682dbc4",
				"dweb:/ipfs/QmRq8YNhd9CggcUi8bD6PPnqSyWMcbnqtWbgjRJpso2pFT"
			]
		},
		"contracts/RiskManager.sol": {
			"keccak256": "0x46ae95c2de84351d3885ecc79a7ed1cb1223452ab40d9edc3f6666b2594d550a",
			"license": "MIT",
			"urls": [
				"bzz-raw://c98681483c3f8943651defd0c4c11cc00e932eb5d51bdd93acd939c4ef9fd389",
				"dweb:/ipfs/QmPPTUxgHZtqZva3crSseJukPteuTc3YTFz5dmjJuAPFJU"
			]
		}
	},
	"version": 1
}